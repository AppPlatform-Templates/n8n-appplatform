# n8n Production Deployment
# Queue mode + Workers + Task Runners + Redis
# For 1000+ workflows/day, code-heavy, enterprise scale
# Cost: ~$66/month base (scales with workers/runners)
#
# Deploy with: doctl apps create --spec .do/examples/production.yaml
# Auto-scale: Requires dedicated CPU instances (apps-d-*)

spec:
  name: n8n-production
  region: ams

  # Main Service - UI, API, Webhooks
  services:
    - name: n8n-main
      image:
        registry_type: GHCR
        registry: ghcr.io
        repository: n8n-io/n8n
        tag: "1.116.2"
      http_port: 5678
      instance_count: 1
      instance_size_slug: apps-s-1vcpu-1gb
      # For auto-scaling: use apps-d-1vcpu-1gb and add autoscaling config

      health_check:
        http_path: /healthz
        initial_delay_seconds: 60
        period_seconds: 10
        timeout_seconds: 3
        success_threshold: 1
        failure_threshold: 3

      envs:
        # Database Configuration
        - key: DB_TYPE
          value: postgresdb
        - key: DB_POSTGRESDB_HOST
          value: ${n8n-db.HOSTNAME}
        - key: DB_POSTGRESDB_PORT
          value: ${n8n-db.PORT}
        - key: DB_POSTGRESDB_DATABASE
          value: ${n8n-db.DATABASE}
        - key: DB_POSTGRESDB_USER
          value: ${n8n-db.USERNAME}
        - key: DB_POSTGRESDB_PASSWORD
          value: ${n8n-db.PASSWORD}

        # Queue Mode Configuration
        - key: EXECUTIONS_MODE
          value: queue
        - key: QUEUE_BULL_REDIS_HOST
          value: ${n8n-redis.HOSTNAME}
        - key: QUEUE_BULL_REDIS_PORT
          value: ${n8n-redis.PORT}
        - key: QUEUE_BULL_REDIS_PASSWORD
          value: ${n8n-redis.PASSWORD}

        # n8n Configuration
        - key: N8N_HOST
          value: ${APP_URL}
        - key: N8N_PROTOCOL
          value: https
        - key: N8N_PORT
          value: "5678"
        - key: WEBHOOK_URL
          value: https://${APP_URL}/

        # Security - CHANGE THESE!
        - key: N8N_ENCRYPTION_KEY
          value: CHANGE_THIS_TO_RANDOM_STRING
          scope: RUN_TIME
          type: SECRET

        # Task Runner Broker (for runners)
        - key: N8N_RUNNERS_ENABLED
          value: "true"
        - key: N8N_RUNNERS_MODE
          value: external
        - key: N8N_RUNNERS_BROKER_LISTEN_ADDRESS
          value: 0.0.0.0
        - key: N8N_RUNNERS_AUTH_TOKEN
          value: CHANGE_THIS_RUNNER_TOKEN
          scope: RUN_TIME
          type: SECRET

        # Application Settings
        - key: N8N_USER_FOLDER
          value: /home/node/.n8n
        - key: N8N_DIAGNOSTICS_ENABLED
          value: "false"
        - key: GENERIC_TIMEZONE
          value: Europe/Amsterdam
        - key: TZ
          value: Europe/Amsterdam

        # Monitoring (optional)
        - key: N8N_METRICS
          value: "true"
        - key: N8N_LOG_LEVEL
          value: info

  # Workers - Execute Workflows from Queue
  workers:
    - name: n8n-worker
      image:
        registry_type: GHCR
        registry: ghcr.io
        repository: n8n-io/n8n
        tag: "1.116.2"
      instance_count: 2  # Start with 2, scale to 10+
      instance_size_slug: apps-s-1vcpu-1gb
      # For auto-scaling: use apps-d-1vcpu-1gb and configure below

      run_command: n8n worker

      # Example autoscaling config (requires dedicated CPU)
      # autoscaling:
      #   min_instance_count: 2
      #   max_instance_count: 10
      #   metrics:
      #     cpu:
      #       percent: 80

      envs:
        # Database Configuration
        - key: DB_TYPE
          value: postgresdb
        - key: DB_POSTGRESDB_HOST
          value: ${n8n-db.HOSTNAME}
        - key: DB_POSTGRESDB_PORT
          value: ${n8n-db.PORT}
        - key: DB_POSTGRESDB_DATABASE
          value: ${n8n-db.DATABASE}
        - key: DB_POSTGRESDB_USER
          value: ${n8n-db.USERNAME}
        - key: DB_POSTGRESDB_PASSWORD
          value: ${n8n-db.PASSWORD}

        # Queue Mode Configuration
        - key: EXECUTIONS_MODE
          value: queue
        - key: QUEUE_BULL_REDIS_HOST
          value: ${n8n-redis.HOSTNAME}
        - key: QUEUE_BULL_REDIS_PORT
          value: ${n8n-redis.PORT}
        - key: QUEUE_BULL_REDIS_PASSWORD
          value: ${n8n-redis.PASSWORD}
        - key: QUEUE_HEALTH_CHECK_ACTIVE
          value: "true"

        # Worker Concurrency
        - key: N8N_CONCURRENCY_PRODUCTION_LIMIT
          value: "10"

        # Security - SAME AS MAIN!
        - key: N8N_ENCRYPTION_KEY
          value: CHANGE_THIS_TO_RANDOM_STRING
          scope: RUN_TIME
          type: SECRET

        # Task Runner Configuration
        - key: N8N_RUNNERS_ENABLED
          value: "true"
        - key: N8N_RUNNERS_MODE
          value: external
        - key: N8N_RUNNERS_BROKER_LISTEN_ADDRESS
          value: 0.0.0.0
        - key: N8N_RUNNERS_AUTH_TOKEN
          value: CHANGE_THIS_RUNNER_TOKEN
          scope: RUN_TIME
          type: SECRET

        # Application Settings
        - key: N8N_USER_FOLDER
          value: /home/node/.n8n
        - key: N8N_DIAGNOSTICS_ENABLED
          value: "false"

    # Task Runners - Execute JavaScript/Python Code
    - name: n8n-runner
      image:
        registry_type: GHCR
        registry: ghcr.io
        repository: n8n-io/runners
        tag: "1.116.2"
      instance_count: 2  # Match or exceed worker count
      instance_size_slug: apps-s-1vcpu-1gb
      # For auto-scaling: use apps-d-1vcpu-1gb

      # Example autoscaling config (requires dedicated CPU)
      # autoscaling:
      #   min_instance_count: 2
      #   max_instance_count: 10
      #   metrics:
      #     cpu:
      #       percent: 80

      envs:
        # Connect to main service's runner broker
        - key: N8N_RUNNERS_TASK_BROKER_URI
          value: http://n8n-main:5679
        - key: N8N_RUNNERS_AUTH_TOKEN
          value: CHANGE_THIS_RUNNER_TOKEN
          scope: RUN_TIME
          type: SECRET

  # Databases
  databases:
    - name: n8n-db
      engine: PG
      version: "17"
      production: true  # Production mode for HA
      cluster_name: n8n-postgres
      # Consider larger size for production:
      # size: db-s-2vcpu-4gb

    - name: n8n-redis
      engine: REDIS
      version: "7"
      production: true  # Production mode for HA
      # Consider larger size for high throughput:
      # size: db-s-1vcpu-2gb
